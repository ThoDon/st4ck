services:
  dir-init:
    build: ./dir-init
    container_name: dir-init
    volumes:
      - ${DATA_DIR:-./data}:/data
      - ${LIBRARY_DIR:-./data}:/library
    environment:
      - DATA_DIR=/data
      - LIBRARY_DIR=/library
    restart: "no"

  rss-worker:
    build: ./rss-worker
    volumes:
      - ${DATA_DIR:-./data}/saved-torrents-files:/app/saved-torrents-files
      - ${DATA_DIR:-./data}/db:/app/db
    environment:
      - RSS_FEED_URL=${RSS_FEED_URL:-https://example.com/feed.xml}
      - DB_PATH=/app/db/rss.sqlite
    depends_on:
      - dir-init
      - db-init
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "pgrep", "-f", "worker.py"]
      interval: 60s
      timeout: 10s
      retries: 3
      start_period: 30s

  transmission:
    image: linuxserver/transmission:latest
    platform: linux/amd64
    container_name: torrent-client
    environment:
      - PUID=${PUID:-1000}
      - PGID=${PGID:-1000}
      - TZ=${TZ:-UTC}
      - USER=${TRANSMISSION_USER:-admin}
      - PASS=${TRANSMISSION_PASS:-admin}
    volumes:
      - ${DATA_DIR:-./data}/downloads:/downloads
      - ${DATA_DIR:-./data}/drop-torrents:/watch
      - transmission-config:/config
    ports:
      - "9091:9091"
    depends_on:
      - dir-init
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9091/transmission/web/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  mover:
    build: ./mover
    container_name: mover
    volumes:
      - ${DATA_DIR:-./data}/downloads:/downloads
      - ${DATA_DIR:-./data}/toMerge:/toMerge
      - ${DATA_DIR:-./data}/converted:/converted
      - ${DATA_DIR:-./data}/toTag:/toTag
    environment:
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    depends_on:
      - dir-init
      - api
      - redis
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "pgrep", "-f", "mover.sh"]
      interval: 60s
      timeout: 10s
      retries: 3
      start_period: 30s

  tagger:
    build: ./tagger
    container_name: tagger
    volumes:
      - ${DATA_DIR:-./data}/toTag:/toTag
    depends_on:
      - dir-init
      - api
    restart: unless-stopped
    networks:
      - default
    healthcheck:
      test: ["CMD", "pgrep", "-f", "tagger.py"]
      interval: 60s
      timeout: 10s
      retries: 3
      start_period: 30s

  api:
    build:
      context: .
      dockerfile: api/Dockerfile
    ports:
      - "8081:8000"
    volumes:
      - ${DATA_DIR:-./data}/db:/app/db
      - ${DATA_DIR:-./data}/downloads:/app/downloads
      - ${DATA_DIR:-./data}/toMerge:/app/toMerge
      - ${DATA_DIR:-./data}/converted:/app/converted
      - ${DATA_DIR:-./data}/conversion-backups:/app/conversion-backups
      - ${LIBRARY_DIR:-${DATA_DIR:-./data}}:/app/library
      - ${DATA_DIR:-./data}/saved-torrents-files:/app/saved-torrents-files
      - ${DATA_DIR:-./data}/toTag:/app/toTag
      - ${DATA_DIR:-./data}/covers:/app/covers
    environment:
      - DB_PATH=/app/db/rss.sqlite
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_DB=0
      - TRANSMISSION_HOST=transmission
      - TRANSMISSION_PORT=9091
      - TRANSMISSION_USER=admin
      - TRANSMISSION_PASS=admin
      - CORS_ORIGINS=${CORS_ORIGINS:-*}
    depends_on:
      - dir-init
      - transmission
      - db-init
      - redis
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  auto-m4b:
    image: seanap/auto-m4b:latest
    platform: linux/amd64
    volumes:
      - ${DATA_DIR:-./data}/auto-m4b/config:/config
      - ${DATA_DIR:-./data}/auto-m4b/temp:/temp
    environment:
      - CPU_CORES=${CPU_CORES:-2}
      - SLEEPTIME=${SLEEPTIME:-1m}
      - MAKE_BACKUP=${MAKE_BACKUP:-N}
    depends_on:
      - dir-init
    restart: unless-stopped
    healthcheck:
      test:
        ["CMD", "ps", "aux", "|", "grep", "-v", "grep", "|", "grep", "auto-m4b"]
      interval: 60s
      timeout: 10s
      retries: 3
      start_period: 60s

  converter:
    build: ./converter
    container_name: converter
    volumes:
      - ${DATA_DIR:-./data}/toMerge:/input
      - ${DATA_DIR:-./data}/converted:/output
      - ${DATA_DIR:-./data}/conversion-backups:/backups
      - ${DATA_DIR:-./data}/db:/app/db
    environment:
      - DB_PATH=/app/db/rss.sqlite
      - API_URL=http://api:8000
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - CONVERSION_MAX_RETRIES=3
      - CONVERSION_BACKUP_RETENTION=3
      - CONVERSION_TIMEOUT=7200
      - M4B_TOOL_BITRATE=64k
      - M4B_TOOL_CODEC=aac
    depends_on:
      - dir-init
      - api
      - db-init
      - redis
    restart: unless-stopped
    healthcheck:
      test:
        [
          "CMD",
          "python",
          "-c",
          "import redis; r=redis.Redis(host='redis', port=6379, db=0); r.ping()",
        ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
  ui:
    build: ./ui
    ports:
      - "8080:3000"
    environment:
      - VITE_API_URL=${VITE_API_URL:-http://localhost:8081}
    depends_on:
      - api
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  redis:
    image: redis:7-alpine
    container_name: redis
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    command: redis-server --appendonly yes
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  db-init:
    build: ./db-init
    volumes:
      - ${DATA_DIR:-./data}/db:/app/db
    environment:
      - DB_PATH=/app/db/rss.sqlite
    depends_on:
      - dir-init
    restart: "no"
    healthcheck:
      test: ["CMD", "test", "-f", "/app/db/rss.sqlite"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 10s

volumes:
  transmission-config:
  redis-data:

x-data-directories: &data-directories
  - ${DATA_DIR:-./data}/drop-torrents
  - ${DATA_DIR:-./data}/downloads
  - ${DATA_DIR:-./data}/saved-torrents-files
  - ${DATA_DIR:-./data}/toMerge
  - ${DATA_DIR:-./data}/converted
  - ${DATA_DIR:-./data}/toTag
  - ${DATA_DIR:-./data}/conversion-backups
  - ${LIBRARY_DIR:-${DATA_DIR:-./data}}
  - ${DATA_DIR:-./data}/db
